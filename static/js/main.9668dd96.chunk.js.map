{"version":3,"sources":["polyfill.js","App.js","serviceWorker.js","index.js","services/globalVars.js","services/userService.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","DefaultLayout","React","lazy","Promise","all","__webpack_require__","e","then","bind","Login","Register","Page404","Page500","App","state","user","console","log","getCurrentUser","this","setState","react_default","a","createElement","HashRouter","Suspense","fallback","className","Switch","Route","exact","path","name","render","props","Redirect","to","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__","getRoleId","localStorage","getItem","url","require","getUserDetails","_x","_getUserDetails","apply","arguments","_callee","username","F_Apps_Personal_Stock_coreui_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","wrap","_context","prev","next","axios","get","abrupt","sent","stop","getRoleIdFromDB","_x2","_getRoleIdFromDB","_callee2","_context2"],"mappings":"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","file":"static/js/main.9668dd96.chunk.js","sourcesContent":["/*\r\n* required polyfills\r\n*/\r\n\r\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\r\n// import 'core-js/es6/symbol'\r\n// import 'core-js/es6/object'\r\n// import 'core-js/es6/function'\r\n// import 'core-js/es6/parse-int'\r\n// import 'core-js/es6/parse-float'\r\n// import 'core-js/es6/number'\r\n// import 'core-js/es6/math'\r\n// import 'core-js/es6/string'\r\n// import 'core-js/es6/date'\r\nimport 'core-js/es6/array'\r\n// import 'core-js/es6/regexp'\r\nimport 'core-js/es6/map'\r\n// import 'core-js/es6/weak-map'\r\nimport 'core-js/es6/set'\r\nimport 'core-js/es7/object'\r\n\r\n/** IE10 and IE11 requires the following for the Reflect API. */\r\n// import 'core-js/es6/reflect'\r\n\r\n/** Evergreen browsers require these. **/\r\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\r\n// import 'core-js/es7/reflect'\r\n\r\n// CustomEvent() constructor functionality in IE9, IE10, IE11\r\n(function () {\r\n\r\n  if ( typeof window.CustomEvent === \"function\" ) return false\r\n\r\n  function CustomEvent ( event, params ) {\r\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\r\n    var evt = document.createEvent( 'CustomEvent' )\r\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\r\n    return evt\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype\r\n\r\n  window.CustomEvent = CustomEvent\r\n})()\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\n// import { renderRoutes } from 'react-router-config';\r\nimport \"./App.scss\";\r\nimport { getCurrentUser } from \"./services/userService\";\r\n\r\nconst loading = () => (\r\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\r\n);\r\n\r\n// Containers\r\nconst DefaultLayout = React.lazy(() => import(\"./containers/DefaultLayout\"));\r\n\r\n// Pages\r\nconst Login = React.lazy(() => import(\"./views/Pages/Login\"));\r\nconst Register = React.lazy(() => import(\"./views/Pages/Register\"));\r\nconst Page404 = React.lazy(() => import(\"./views/Pages/Page404\"));\r\nconst Page500 = React.lazy(() => import(\"./views/Pages/Page500\"));\r\n\r\nclass App extends Component {\r\n  state = {\r\n    user: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"did mount\");\r\n    const user = getCurrentUser();\r\n    console.log(user);\r\n    this.setState({ user });\r\n  }\r\n\r\n  render() {\r\n    const user = getCurrentUser();\r\n    return (\r\n      <HashRouter>\r\n        <React.Suspense fallback={loading()}>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path=\"/login\"\r\n              name=\"Login Page\"\r\n              render={props => <Login {...props} />}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/register\"\r\n              name=\"Register Page\"\r\n              render={props => <Register {...props} />}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/404\"\r\n              name=\"Page 404\"\r\n              render={props => <Page404 {...props} />}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/500\"\r\n              name=\"Page 500\"\r\n              render={props => <Page500 {...props} />}\r\n            />\r\n            <Route\r\n              path=\"/\"\r\n              name=\"Home\"\r\n              render={props => {\r\n                if (!user) return <Redirect to=\"/login\" />;\r\n                return <DefaultLayout {...props} />;\r\n              }}\r\n            />\r\n          </Switch>\r\n        </React.Suspense>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\r\nimport 'react-app-polyfill/ie11'; // For IE 11 support\r\nimport './polyfill'\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","// let url = \"http://192.168.8.100:4500/api/\";\r\nlet url = \"http://localhost:4500/api/\";\r\n\r\nexport function getRoleId() {\r\n  return localStorage.getItem(\"roleId\");\r\n}\r\n\r\nexport default url;\r\n","import url from './globalVars';\r\nimport axios from 'axios';\r\n\r\nconst request = require('superagent');\r\n\r\n\r\nexport async function getUserDetails(username) {\r\n    return await axios.get(url + \"Users/login/\" + username);\r\n}\r\n\r\nexport async function getRoleIdFromDB(username) {\r\n\r\n    return await axios.get(url + \"Users/login/\" + username);\r\n\r\n    // then((d) => {\r\n    //     localStorage.setItem(\"roleId\", d.data.role.id);\r\n    // })\r\n\r\n}\r\n\r\nexport function getCurrentUser() {\r\n    return localStorage.getItem('user');\r\n}"],"sourceRoot":""}